# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    sounds_directory: '%kernel.project_dir%/public/sounds'
    root_directory: '%kernel.project_dir%/public'
    session_max_idle_time: 14400
    cookie_lifetime: 14400
    # MongoDB configuration
    # env(MONGODB_URL): ''
    # env(MONGODB_DB): ''

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Migrations/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\Admin\:
        resource: '../src/Controller/Admin'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    Doctrine\Persistence\ObjectManager: '@doctrine.orm.default_entity_manager'

    App\Twig\DateFilter:
       tags:
           - { name: twig.extension }

    App\Twig\FormatDateInFrench:
        tags:
            - { name: twig.extension }

    App\Service\Order\OrderService:
        arguments:
            $orderRepository: '@App\Repository\OrderRepository'
            $entityManager: '@doctrine.orm.default_entity_manager'
            $stockListRepository: '@App\Repository\StockListRepository'
            $transactionRepository: '@App\Repository\TransactionRepository'

    App\Service\Order\OrderExportService: ~

    # Configuration du cache Redis pour les statistiques
    redis.connection:
        class: Redis
        factory: ['Symfony\Component\Cache\Adapter\RedisAdapter', 'createConnection']
        arguments:
            $dsn: '%env(REDIS_URL)%'
            $options:
                lazy: true
                persistent: 0
                timeout: 30
                read_timeout: 30
                retry_interval: 0

    redis.marshaller:
        class: Symfony\Component\Cache\Marshaller\DefaultMarshaller

    stats.cache:
        class: Symfony\Component\Cache\Adapter\RedisAdapter
        arguments:
            $redis: '@redis.connection'
            $marshaller: '@redis.marshaller'
            $namespace: 'stats'
            $defaultLifetime: 3600

    App\Service\Cache\StatisticsCacheService:
        arguments:
            $cache: '@stats.cache'

    App\Repository\ProductSearchRepository:
        arguments:
            $finder: '@fos_elastica.finder.products'

    App\EventListener\ProductIndexer:
        arguments:
            $persister: '@fos_elastica.object_persister.products'
        tags:
            - { name: 'doctrine.event_listener', event: 'postPersist' }
            - { name: 'doctrine.event_listener', event: 'postUpdate' }
            - { name: 'doctrine.event_listener', event: 'preRemove' }
